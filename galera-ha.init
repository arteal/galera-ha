#!/bin/bash

# chkconfig: 345 90 90
# description:  HAProxy L7 check for Galera Synced state

### BEGIN INIT INFO
# Provides:          galera-ha
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       HAProxy L7 check for Galera Synced state
### END INIT INFO

exec=/usr/local/bin/galera-ha
pidfile=/home/galeraha/galera-ha.pid
service=galera-ha
USER=galeraha

test -x $DAEMON || exit 0

system=unknown
if [ -f /etc/redhat-release ]; then
    system=redhat
elif [ -f /etc/system-release ]; then
    system=redhat
elif [ -f /etc/debian_version ]; then
    system=debian
elif [ -f /etc/SuSE-release ]; then
    system=suse
elif [ -f /etc/gentoo-release ]; then
    system=gentoo
elif [ -f /etc/arch-release ]; then
    system=arch
elif [ -f /etc/slackware-version ]; then
    system=slackware
elif [ -f /etc/lfs-release ]; then
    system=lfs
fi

##
## Set platform specific bits here.
## The original platform for this script was redhat so the scripts are partial
## to redhat style. Eventually we may want to be more LSB compliant
## such as what Debian platforms already implement instead.
##
## Each platform must implement at least the following functions:
##
##     start_daemon $user $pidfile $executable "arguments"
##     killproc -p $pid $service
##     log_daemon_msg $@
##     log_action_msg $@
##     log_success_msg $@
##     log_failure_msg $@
##     echo_ok
##     echo_fail
##
if [ "$system" = "redhat" ]; then
    ## source platform specific external scripts
    . /etc/init.d/functions
    [ -r /etc/sysconfig/$service ] && . /etc/sysconfig/$service

    ## set or override platform specific variables
    lockfile=${LOCKFILE-/var/lock/subsys/$service}

    ## set or override platform specific functions
    start_daemon() {
        daemon --user $1 --pidfile $2 "$3 $4"
    }   
    log_daemon_msg() {
        echo -n $"$1"
    }   
    echo_ok() {
        echo_success; echo
    }   
    echo_fail() {
        echo_failure; echo
    }   
    log_success_msg() {
        success $"$@"
    }   
    log_failure_msg() {
        failure $"$@"
        echo $"$@"
    }   
    log_action_msg() {
        echo $@
    }
fi
if [ "$system" = "debian" ]; then
    ## source platform specific external scripts
    . /lib/lsb/init-functions
    [ -r /etc/default/$service ] && . /etc/default/$service

    ## set or override platform specific variables
    lockfile=${LOCKFILE-/var/lock/$service}

    ## set or override platform specific functions
    start_daemon() {
        start-stop-daemon --start --chuid $1 --pidfile $2 --exec $3 -- $4
    }
    echo_ok() {
        log_end_msg 0
    }
    echo_fail() {
        log_end_msg 1
    }
fi

options=""
do_start() {
    log_daemon_msg "Starting $service"

    [ -x $exec ] || exit 5

    if [ ! -f /var/log/galera-ha.log ]; then
        touch /var/log/galera-ha.log
        chown galeraha /var/log/galera-ha.log
    fi

    start_daemon $USER $pidfile $exec "$options"
    retval=$?
    sleep 1

    if [ $retval -ne 0 ]; then
        echo_fail
        exit 1
    fi

    if [ $retval -eq 0 ]; then
        echo_ok
    fi

    return $retval
}

#
# Function that stops the daemon/service
#
do_stop() {
   log_daemon_msg "Stopping $service"

    if [ -f $pidfile ]; then
        killproc -p $pidfile $service
        retval=$?
        if [ $retval -eq 0 ]; then
            rm -f $pidfile
            echo_ok
        else
            echo_fail
        fi
        sleep 1
        return $retval
    else
        pid=$(pgrep -P1 -fl $exec | grep -v grep | grep -v bash | cut -f1 -d" ")
        if [ ! "$pid" == "" ]; then
            kill $pid
            retval=$?
            if [ $retval -eq 0 ]; then
                rm -f $pidfile
                echo_ok
            else
                echo_fail
            fi
            sleep 1
            return $retval
        else
            echo_fail
        fi
    fi
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart)
       do_stop
       do_start
        ;;
   *)
        echo "Usage: $service {start|stop|restart}" >&2
        exit 3
        ;;
esac

:
